--- Start of ./src\App.tsx ---
import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import { useStore } from './store';
import { AuthProvider } from './context/AuthContext';
import { ProtectedRoute, RoleRoute } from './components/ProtectedRoute';
import Navbar from './components/Navbar';
import JobManagement from './pages/JobManagement';
import Home from './pages/Home';
import Jobs from './pages/Jobs';
import JobDetails from './pages/JobDetails';
import EmployerDashboard from './pages/EmployerDashboard';
import JobSeekerDashboard from './pages/JobSeekerDashboard';
import Login from './pages/Login';
import Register from './pages/Register';
import ApplicationForm from './components/ApplicationForm';
import ApplicationDetails from './components/ApplicationDetails';

function App() {
  const isDarkMode = useStore((state) => state.isDarkMode);

  return (
    <AuthProvider>
      <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>
        <BrowserRouter>
          <Navbar />
          <main className="container mx-auto px-4 py-8">
            <Routes>
              {/* Public routes */}
              <Route path="/" element={<Home />} />
              <Route path="/jobs" element={<Jobs />} />
              <Route path="/jobs/:_id" element={<JobDetails />} />
              <Route path="/login" element={<Login />} />
              <Route path="/register" element={<Register />} />
              <Route path="/jobs/:id/apply" element={<ApplicationForm />} />
              <Route path="/applications/:id" element={<ApplicationDetails />} />

              {/* Protected routes with role-based access */}
              <Route element={<RoleRoute allowedRoles={['employer']} />}>
                <Route path="/employer/dashboard" element={<EmployerDashboard />} />
                <Route path="/employer/jobs" element={<JobManagement />} />
              </Route>

              <Route element={<RoleRoute allowedRoles={['jobseeker']} />}>
                <Route path="/jobseeker/dashboard" element={<JobSeekerDashboard />} />
              </Route>
            </Routes>
          </main>
        </BrowserRouter>
      </div>
    </AuthProvider>
  );
}

export default App;

--- Start of ./src\index.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;


--- Start of ./src\main.tsx ---
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);


--- Start of ./src\vite-env.d.ts ---
/// <reference types="vite/client" />


--- Start of ./src\components\ApplicationDetails.tsx ---
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useStore } from '../store';
import { getApplication, updateApplicationStatus } from '../services/applicationService';

const ApplicationDetails = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const isDarkMode = useStore((state) => state.isDarkMode);
  const currentUser = useStore((state) => state.currentUser);
  const [application, setApplication] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [status, setStatus] = useState('');
  const [error, setError] = useState('');

  useEffect(() => {
    const loadApplication = async () => {
      try {
        const data = await getApplication(id!);
        setApplication(data);
        setStatus(data.status);
      } catch (error) {
        console.error('Error fetching application:', error);
        navigate('/');
      } finally {
        setLoading(false);
      }
    };
    
    loadApplication();
  }, [id, navigate]);

  const handleStatusUpdate = async () => {
    try {
      await updateApplicationStatus(id!, status);
      setApplication({...application, status});
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to update status');
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div className={`${isDarkMode ? 'bg-gray-900 text-white' : 'bg-white text-gray-900'} p-8 rounded-lg shadow-md`}>
      <h1 className="text-3xl font-bold mb-6">Application Details</h1>
      
      <div className="grid md:grid-cols-2 gap-8 mb-8">
        <div>
          <h2 className="text-xl font-semibold mb-4">Job Information</h2>
          <p className="mb-2"><span className="font-semibold">Title:</span> {application.job.title}</p>
          <p className="mb-2"><span className="font-semibold">Company:</span> {application.job.company}</p>
        </div>
        
        <div>
          <h2 className="text-xl font-semibold mb-4">Applicant Information</h2>
          <p className="mb-2"><span className="font-semibold">Name:</span> {application.user.name}</p>
          <p className="mb-2"><span className="font-semibold">Email:</span> {application.user.email}</p>
        </div>
      </div>
      
      <div className="mb-8">
        <h2 className="text-xl font-semibold mb-4">Cover Letter</h2>
        <p className="whitespace-pre-line">{application.coverLetter}</p>
      </div>
      
      <div className="mb-8">
        <h2 className="text-xl font-semibold mb-4">Resume</h2>
        <a 
          href={application.resume} 
          target="_blank" 
          rel="noopener noreferrer"
          className="text-blue-600 hover:text-blue-800"
        >
          View Resume
        </a>
      </div>
      
      {currentUser?.role === 'employer' && (
        <div className="mb-8">
          <h2 className="text-xl font-semibold mb-4">Update Status</h2>
          <div className="flex items-center gap-4">
            <select
              value={status}
              onChange={(e) => setStatus(e.target.value)}
              className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'} border`}
            >
              <option value="pending">Pending</option>
              <option value="reviewed">Reviewed</option>
              <option value="accepted">Accepted</option>
              <option value="rejected">Rejected</option>
            </select>
            <button
              onClick={handleStatusUpdate}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              Update
            </button>
          </div>
          {error && (
            <div className={`mt-2 p-2 rounded-lg ${isDarkMode ? 'bg-red-900 text-red-200' : 'bg-red-100 text-red-800'}`}>
              {error}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default ApplicationDetails;

--- Start of ./src\components\ApplicationForm.tsx ---
import React, { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useStore } from '../store';
import { createApplication } from '../services/applicationService';

const ApplicationForm = () => {
    const { id: jobId } = useParams();
    const navigate = useNavigate();
    const isDarkMode = useStore((state) => state.isDarkMode);
    const [formData, setFormData] = useState({
        coverLetter: '',
        resume: ''
    });
    const [error, setError] = useState('');
    const [isLoading, setIsLoading] = useState(false);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!jobId) {
            setError('Job ID is missing');
            return;
        }

        setError('');
        setIsLoading(true);

        try {
            await createApplication({
                jobId,
                ...formData
            });
            navigate(`/jobs/${jobId}`);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to apply');
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className={`max-w-2xl mx-auto p-6 ${isDarkMode ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow-md`}>
            <h2 className="text-2xl font-bold mb-6">Apply for Job</h2>

            {error && (
                <div className={`p-4 mb-4 rounded-lg ${isDarkMode ? 'bg-red-900 text-red-200' : 'bg-red-100 text-red-800'}`}>
                    {error}
                </div>
            )}

            <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                    <label className="block text-sm font-medium mb-2">Cover Letter</label>
                    <textarea
                        value={formData.coverLetter}
                        onChange={(e) => setFormData({ ...formData, coverLetter: e.target.value })}
                        rows={8}
                        className={`w-full p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'} border focus:ring-2 focus:ring-blue-500`}
                        required
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium mb-2">Resume URL</label>
                    <input
                        type="url"
                        value={formData.resume}
                        onChange={(e) => setFormData({ ...formData, resume: e.target.value })}
                        className={`w-full p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'} border focus:ring-2 focus:ring-blue-500`}
                        required
                    />
                </div>

                <div className="flex justify-end gap-4 pt-4">
                    <button
                        type="button"
                        onClick={() => navigate(-1)}
                        className={`px-6 py-2 rounded-lg ${isDarkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-200 hover:bg-gray-300'}`}
                        disabled={isLoading}
                    >
                        Cancel
                    </button>
                    <button
                        type="submit"
                        className={`px-6 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 ${isLoading ? 'opacity-70 cursor-not-allowed' : ''}`}
                        disabled={isLoading}
                    >
                        {isLoading ? 'Submitting...' : 'Submit Application'}
                    </button>
                </div>
            </form>
        </div>
    );
};

export default ApplicationForm;

--- Start of ./src\components\JobForm.tsx ---
import React, { useState } from 'react';
import { useStore } from '../store';
import { Job } from '../types';
import { X } from 'lucide-react';

interface JobFormProps {
  initialData?: Partial<Job>;
  onSubmit: (jobData: Omit<Job, 'id' | 'postedDate'>) => Promise<void>;
  onCancel?: () => void;
  isLoading: boolean;
}

const JobForm: React.FC<JobFormProps> = ({ 
  initialData, 
  onSubmit, 
  onCancel, 
  isLoading 
}) => {
  const isDarkMode = useStore((state) => state.isDarkMode);
  const [formData, setFormData] = useState<Omit<Job, 'id' | 'postedDate'>>({
    title: initialData?.title || '',
    company: initialData?.company || '',
    location: initialData?.location || '',
    type: initialData?.type || 'Full-time',
    salary: initialData?.salary || '',
    description: initialData?.description || '',
    requirements: initialData?.requirements || [''],
    category: initialData?.category || 'Development',
  });
  const [error, setError] = useState('');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleRequirementChange = (index: number, value: string) => {
    const newRequirements = [...formData.requirements];
    newRequirements[index] = value;
    setFormData(prev => ({ ...prev, requirements: newRequirements }));
  };

  const addRequirement = () => {
    setFormData(prev => ({ ...prev, requirements: [...prev.requirements, ''] }));
  };

  const removeRequirement = (index: number) => {
    if (formData.requirements.length <= 1) return;
    const newRequirements = [...formData.requirements];
    newRequirements.splice(index, 1);
    setFormData(prev => ({ ...prev, requirements: newRequirements }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    
    try {
      await onSubmit(formData);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {error && (
        <div className={`p-4 rounded-lg ${isDarkMode ? 'bg-red-900 text-red-200' : 'bg-red-100 text-red-800'}`}>
          {error}
        </div>
      )}

      <div className="grid md:grid-cols-2 gap-6">
        <div>
          <label className="block text-sm font-medium mb-2">Job Title*</label>
          <input
            type="text"
            name="title"
            value={formData.title}
            onChange={handleChange}
            className={`w-full p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'} border focus:ring-2 focus:ring-blue-500`}
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Company*</label>
          <input
            type="text"
            name="company"
            value={formData.company}
            onChange={handleChange}
            className={`w-full p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'} border focus:ring-2 focus:ring-blue-500`}
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Location*</label>
          <input
            type="text"
            name="location"
            value={formData.location}
            onChange={handleChange}
            className={`w-full p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'} border focus:ring-2 focus:ring-blue-500`}
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Job Type*</label>
          <select
            name="type"
            value={formData.type}
            onChange={handleChange}
            className={`w-full p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'} border focus:ring-2 focus:ring-blue-500`}
            required
          >
            <option value="Full-time">Full-time</option>
            <option value="Part-time">Part-time</option>
            <option value="Contract">Contract</option>
            <option value="Freelance">Freelance</option>
            <option value="Internship">Internship</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Salary*</label>
          <input
            type="text"
            name="salary"
            value={formData.salary}
            onChange={handleChange}
            className={`w-full p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'} border focus:ring-2 focus:ring-blue-500`}
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Category*</label>
          <select
            name="category"
            value={formData.category}
            onChange={handleChange}
            className={`w-full p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'} border focus:ring-2 focus:ring-blue-500`}
            required
          >
            <option value="Development">Development</option>
            <option value="Design">Design</option>
            <option value="Marketing">Marketing</option>
            <option value="Sales">Sales</option>
            <option value="Business">Business</option>
            <option value="Customer Support">Customer Support</option>
          </select>
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium mb-2">Job Description*</label>
        <textarea
          name="description"
          value={formData.description}
          onChange={handleChange}
          rows={5}
          className={`w-full p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'} border focus:ring-2 focus:ring-blue-500`}
          required
        />
      </div>

      <div>
        <label className="block text-sm font-medium mb-2">Requirements*</label>
        <div className="space-y-2">
          {formData.requirements.map((req, index) => (
            <div key={index} className="flex items-center gap-2">
              <input
                type="text"
                value={req}
                onChange={(e) => handleRequirementChange(index, e.target.value)}
                className={`flex-1 p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'} border`}
                required
              />
              <button
                type="button"
                onClick={() => removeRequirement(index)}
                disabled={formData.requirements.length <= 1}
                className={`p-2 rounded-full ${isDarkMode ? 'hover:bg-gray-600' : 'hover:bg-gray-100'} ${formData.requirements.length <= 1 ? 'opacity-50 cursor-not-allowed' : ''}`}
              >
                <X size={16} />
              </button>
            </div>
          ))}
          <button
            type="button"
            onClick={addRequirement}
            className={`mt-2 px-3 py-1 text-sm rounded-lg ${isDarkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-100 hover:bg-gray-200'}`}
          >
            Add Requirement
          </button>
        </div>
      </div>

      <div className="flex justify-end gap-4 pt-4">
        {onCancel && (
          <button
            type="button"
            onClick={onCancel}
            className={`px-6 py-2 rounded-lg ${isDarkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-200 hover:bg-gray-300'}`}
            disabled={isLoading}
          >
            Cancel
          </button>
        )}
        <button
          type="submit"
          className={`px-6 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 ${isLoading ? 'opacity-70 cursor-not-allowed' : ''}`}
          disabled={isLoading}
        >
          {isLoading ? 'Processing...' : 'Save Job'}
        </button>
      </div>
    </form>
  );
};

export default JobForm;

--- Start of ./src\components\Modal.tsx ---
import React from 'react';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  children: React.ReactNode;
}

const Modal: React.FC<ModalProps> = ({ isOpen, onClose, children }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-50">
      <div className="relative max-w-2xl w-full rounded-lg shadow-xl">
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-500 hover:text-gray-700"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
        </button>
        {children}
      </div>
    </div>
  );
};

export default Modal;

--- Start of ./src\components\Navbar.tsx ---
import React, { useState, useRef, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Sun, Moon, User, LogOut } from 'lucide-react';
import { useStore } from '../store';
import { useAuth } from '../context/AuthContext';

function Navbar() {
  const { isDarkMode, toggleDarkMode } = useStore();
  const { user, logout, isAuthenticated } = useAuth();
  const navigate = useNavigate();

  const [dropdownOpen, setDropdownOpen] = useState(false);
  const dropdownRef = useRef(null);

  const handleLogout = () => {
    logout();
    navigate('/');
  };

  // Close dropdown on click outside
  useEffect(() => {
    const handleClickOutside = (event: { target: any; }) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setDropdownOpen(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  return (
    <nav className={`${isDarkMode ? 'dark bg-gray-800' : 'bg-white'} shadow-md`}>
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-between h-16">
          <Link to="/" className={`text-xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
            JobPortal
          </Link>

          <div className="flex items-center space-x-4">
            <Link to="/jobs" className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'} hover:text-blue-600`}>
              Jobs
            </Link>

            {isAuthenticated ? (
              <>
                {user?.role && (
                  <Link to={`/${user.role}/dashboard`} className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'} hover:text-blue-600`}>
                    Dashboard
                  </Link>
                )}

                <div className="relative" ref={dropdownRef}>
                  <button
                    onClick={() => setDropdownOpen(prev => !prev)}
                    className={`flex items-center cursor-pointer ${isDarkMode ? 'text-gray-300' : 'text-gray-700'} hover:text-blue-600`}
                  >
                    <User size={20} className="mr-1" />
                    <span>{user?.name}</span>
                  </button>

                  {dropdownOpen && (
                    <div className={`absolute right-0 z-10 mt-2 w-48 rounded-md shadow-lg ${isDarkMode ? 'bg-gray-700' : 'bg-white'} ring-1 ring-black ring-opacity-5`}>
                      <div className="py-1">
                        <button
                          onClick={handleLogout}
                          className={`flex items-center w-full text-left px-4 py-2 ${isDarkMode ? 'text-gray-300 hover:bg-gray-600' : 'text-gray-700 hover:bg-gray-100'}`}
                        >
                          <LogOut size={16} className="mr-2" />
                          Logout
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              </>
            ) : (
              <>
                <Link to="/login" className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'} hover:text-blue-600`}>
                  Login
                </Link>
                <Link to="/register" className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'} hover:text-blue-600`}>
                  Register
                </Link>
              </>
            )}

            <button
              onClick={toggleDarkMode}
              className={`p-2 rounded-full ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}
            >
              {isDarkMode ? <Sun size={20} /> : <Moon size={20} />}
            </button>
          </div>
        </div>
      </div>
    </nav>
  );
}

export default Navbar;


--- Start of ./src\components\ProtectedRoute.tsx ---
import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

// Protected route that requires authentication
export const ProtectedRoute: React.FC = () => {
  const { isAuthenticated, loading } = useAuth();

  // Show loading state while checking authentication
  if (loading) {
    return <div>Loading...</div>;
  }

  // Redirect to login if not authenticated
  return isAuthenticated ? <Outlet /> : <Navigate to="/login" />;
};

// Role-specific protected route
interface RoleRouteProps {
  allowedRoles: string[];
}

export const RoleRoute: React.FC<RoleRouteProps> = ({ allowedRoles }) => {
  const { user, loading, isAuthenticated } = useAuth();

  // Show loading state while checking authentication
  if (loading) {
    return <div>Loading...</div>;
  }

  // Redirect to login if not authenticated
  if (!isAuthenticated) {
    return <Navigate to="/login" />;
  }

  // Redirect to home if not authorized for this role
  if (user && !allowedRoles.includes(user.role)) {
    return <Navigate to="/" />;
  }

  // Render child routes if authenticated and authorized
  return <Outlet />;
};

--- Start of ./src\context\AuthContext.tsx ---
// src/context/AuthContext.tsx
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { User } from '../types';
import { setAuthCookie, removeAuthCookie, getAuthCookie } from '../utils/cookies';
import api from '../utils/api';
import { useStore } from '../store';

interface AuthContextType {
  user: User | null;
  loading: boolean;
  login: (email: string, password: string) => Promise<void>;
  register: (userData: RegisterData) => Promise<void>;
  logout: () => void;
  isAuthenticated: boolean;
}

interface RegisterData {
  name: string;
  email: string;
  password: string;
  role: 'employer' | 'jobseeker';
  company?: string;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const { setCurrentUser } = useStore();

  useEffect(() => {
    const verifyUser = async () => {
      try {
        const token = getAuthCookie();
        if (token) {
          const response = await api.get('/auth/verify');
          setUser(response.data.user);
        }
      } catch (error) {
        removeAuthCookie();
      } finally {
        setLoading(false);
      }
    };

    verifyUser();
  }, []);

  const login = async (email: string, password: string) => {
    try {
      const response = await api.post('/auth/login', { email, password });
      const { token, user } = response.data;

      setAuthCookie(token);
      setUser(user);
      setCurrentUser(user); // Add this line
    } catch (error) {
      throw new Error('Invalid credentials');
    }
  };

  const register = async (userData: RegisterData) => {
    try {
      const response = await api.post('/auth/register', userData);
      const { token, user } = response.data;

      setAuthCookie(token);
      setUser(user);
      setCurrentUser(user);
    } catch (error: unknown) {
      if (error && typeof error === 'object' && 'response' in error) {
        const axiosError = error as { response?: { data?: { message?: string } } };
        throw new Error(axiosError.response?.data?.message || 'Registration failed');
      }
      throw new Error('Registration failed');
    }
  };

  const logout = () => {
    removeAuthCookie();
    setUser(null);
    setCurrentUser(null);
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        loading,
        login,
        register,
        logout,
        isAuthenticated: !!user,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

--- Start of ./src\data\index.ts ---
import { Job, Application, User } from '../types';

export const dummyJobs: Job[] = [
  {
    id: '1',
    title: 'Senior React Developer',
    company: 'TechCorp Inc.',
    location: 'Remote',
    type: 'Full-time',
    salary: '$120,000 - $150,000',
    description: 'We are looking for a senior React developer to join our team...',
    requirements: [
      '5+ years of React experience',
      'TypeScript proficiency',
      'Experience with state management',
    ],
    postedDate: '2024-03-10',
    category: 'Development',
  },
  {
    id: '2',
    title: 'UI/UX Designer',
    company: 'DesignHub',
    location: 'New York, NY',
    type: 'Full-time',
    salary: '$90,000 - $120,000',
    description: 'Join our creative team as a UI/UX Designer...',
    requirements: [
      '3+ years of design experience',
      'Proficiency in Figma',
      'Strong portfolio',
    ],
    postedDate: '2024-03-09',
    category: 'Design',
  },
  {
    id: '3',
    title: 'Marketing Manager',
    company: 'GrowthCo',
    location: 'San Francisco, CA',
    type: 'Full-time',
    salary: '$100,000 - $130,000',
    description: 'Lead our marketing initiatives...',
    requirements: [
      '5+ years of marketing experience',
      'Experience with digital marketing',
      'Strong analytical skills',
    ],
    postedDate: '2024-03-08',
    category: 'Marketing',
  },
];

export const dummyApplications: Application[] = [
  {
    id: '1',
    jobId: '1',
    userId: '1',
    status: 'pending',
    appliedDate: '2024-03-12',
    coverLetter: 'I am excited to apply for this position...',
    resume: 'https://example.com/resume.pdf',
  },
  {
    id: '2',
    jobId: '2',
    userId: '1',
    status: 'accepted',
    appliedDate: '2024-03-10',
    coverLetter: 'I believe I would be a great fit...',
    resume: 'https://example.com/resume.pdf',
  },
  {
    id: '3',
    jobId: '3',
    userId: '1',
    status: 'rejected',
    appliedDate: '2024-03-08',
    coverLetter: 'I am interested in this opportunity...',
    resume: 'https://example.com/resume.pdf',
  },
];

export const dummyUsers: User[] = [
  {
    id: '1',
    name: 'John Doe',
    email: 'john@example.com',
    role: 'jobseeker',
  },
  {
    id: '2',
    name: 'Jane Smith',
    email: 'jane@techcorp.com',
    role: 'employer',
    company: 'TechCorp Inc.',
  },
];

--- Start of ./src\pages\EmployerDashboard.tsx ---
// src/pages/EmployerDashboard.tsx
import React, { useEffect, useState } from 'react';
import { useStore } from '../store';
import { Application, Job } from '../types';
import { fetchJobs } from '../services/jobService';
import { getApplications } from '../services/applicationService';
import { Link } from 'react-router-dom';

const EmployerDashboard = () => {
  const isDarkMode = useStore((state) => state.isDarkMode);
  const currentUser = useStore((state) => state.currentUser);
  const [jobs, setJobs] = useState<Job[]>([]);
  const [applications, setApplications] = useState<Application[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadData = async () => {
      try {
        const allJobs = await fetchJobs();
        const employerJobs = allJobs.filter((job) => job.company === currentUser?.company);
        setJobs(employerJobs);

        const allApps = await getApplications();
        const employerApps = allApps.filter(app => employerJobs.some(job => job.id === app.jobId));
        setApplications(employerApps);
      } catch (err) {
        console.error('Dashboard load error:', err);
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, [currentUser]);

  const statBox = (title: string, value: number, color: string) => (
    <div className={`${isDarkMode ? 'bg-gray-800' : 'bg-white'} p-6 rounded-lg shadow-md`}>
      <h3 className="text-lg font-semibold mb-2">{title}</h3>
      <p className={`text-3xl font-bold ${color}`}>{value}</p>
    </div>
  );

  return (
    <div className={`${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
      <div className="mb-8">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold mb-1">Employer Dashboard</h1>
            <p className="text-gray-500">Welcome back, {currentUser?.name}</p>
          </div>
          <Link
            to="/employer/jobs"
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Manage Jobs
          </Link>
        </div>
      </div>

      {loading ? (
        <p>Loading stats...</p>
      ) : (
        <div className="grid md:grid-cols-4 gap-6 mb-8">
          {statBox('Active Jobs', jobs.length, 'text-blue-600')}
          {statBox('Total Applications', applications.length, 'text-green-600')}
          {statBox('Pending Review', applications.filter(app => app.status === 'pending').length, 'text-yellow-600')}
          {statBox('Hired', applications.filter(app => app.status === 'accepted').length, 'text-purple-600')}
        </div>
      )}
    </div>
  );
};

export default EmployerDashboard;

--- Start of ./src\pages\Home.tsx ---
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Briefcase, Search, Building2 } from 'lucide-react';
import { useStore } from '../store';
import { useAuth } from '../context/AuthContext';

function Home() {
  const isDarkMode = useStore((state) => state.isDarkMode);
  const { user, isAuthenticated } = useAuth();
  const navigate = useNavigate();

  const handlePostJob = () => {
    if (!isAuthenticated) {
      navigate('/register');
    } else if (user?.role === 'employer') {
      navigate('/employer/jobs');
    } else {
      navigate('/');
    }
  };

  return (
    <div className={`${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
      <div className="text-center mb-16">
        <h1 className="text-4xl font-bold mb-4">Find Your Dream Job Today</h1>
        <p className="text-xl mb-8">Connect with top employers and opportunities</p>

        <div className="flex justify-center gap-4">
          <Link
            to="/jobs"
            className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition"
          >
            Browse Jobs
          </Link>
          <button
            onClick={handlePostJob}
            className="bg-gray-600 text-white px-6 py-3 rounded-lg hover:bg-gray-700 transition"
          >
            Post a Job
          </button>

        </div>
      </div>

      <div className="grid md:grid-cols-3 gap-8 mt-16">
        <div className={`p-6 rounded-lg ${isDarkMode ? 'bg-gray-800' : 'bg-white'} shadow-lg`}>
          <Search className="w-12 h-12 text-blue-600 mb-4" />
          <h3 className="text-xl font-semibold mb-2">Search Jobs</h3>
          <p className={`${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
            Browse through thousands of job listings from top companies.
          </p>
        </div>

        <div className={`p-6 rounded-lg ${isDarkMode ? 'bg-gray-800' : 'bg-white'} shadow-lg`}>
          <Briefcase className="w-12 h-12 text-blue-600 mb-4" />
          <h3 className="text-xl font-semibold mb-2">Easy Apply</h3>
          <p className={`${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
            Apply to multiple jobs with just a few clicks using your profile.
          </p>
        </div>

        <div className={`p-6 rounded-lg ${isDarkMode ? 'bg-gray-800' : 'bg-white'} shadow-lg`}>
          <Building2 className="w-12 h-12 text-blue-600 mb-4" />
          <h3 className="text-xl font-semibold mb-2">Company Profiles</h3>
          <p className={`${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
            Learn about company culture and benefits before applying.
          </p>
        </div>
      </div>
    </div>
  );
}

export default Home;

--- Start of ./src\pages\JobDetails.tsx ---
import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import { MapPin, Building2, Clock, Send, Check } from 'lucide-react';
import { useStore } from '../store';
import { dummyApplications } from '../data';
import { useAuth } from '../context/AuthContext';
import { fetchJob } from '../services/jobService';
import { Job } from '../types';

function JobDetails() {
  const { _id } = useParams();
  const isDarkMode = useStore((state) => state.isDarkMode);
  const { user } = useAuth();
  const [job, setJob] = useState<Job | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadJob = async () => {
      setLoading(true);
      try {
        if (_id) {
          const data = await fetchJob(_id);
          console.log(data);
          setJob(data);
        }
      } catch (error) {
        console.error('Failed to fetch job:', error);
      } finally {
        setLoading(false);
      }
    };

    loadJob();
  }, [_id]);

  const hasApplied =
    user?.role === 'jobseeker' &&
    dummyApplications.some(app => app.jobId === _id && app.userId === user?.id);

  if (!job) {
    return <div>Job not found</div>;
  }

  return (
    <div className={`${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
      <div className={`${isDarkMode ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow-md p-8 mb-8`}>
        <div className="flex justify-between items-start mb-6">
          <div>
            <h1 className="text-3xl font-bold mb-4">{job.title}</h1>
            <div className="flex items-center text-gray-500 mb-4">
              <Building2 className="w-5 h-5 mr-2" />
              <span className="mr-4">{job.company}</span>
              <MapPin className="w-5 h-5 mr-2" />
              <span>{job.location}</span>
            </div>
            <div className="flex flex-wrap gap-2">
              <span className={`px-4 py-2 rounded-full text-sm ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>
                {job.type}
              </span>
              <span className={`px-4 py-2 rounded-full text-sm ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>
                {job.category}
              </span>
            </div>
          </div>
          <div className="text-right">
            <div className="text-2xl font-bold text-blue-600 mb-2">₹{job.salary}</div>
            <div className="flex items-center text-gray-500">
              <Clock className="w-5 h-5 mr-2" />
              <span>Posted {new Date(job.createdAt).toLocaleDateString()}</span>
            </div>
          </div>
        </div>

        {user?.role === 'jobseeker' && (
          hasApplied ? (
            <button className="w-full md:w-auto bg-gray-400 text-white px-8 py-3 rounded-lg cursor-not-allowed flex items-center justify-center">
              <Check className="w-5 h-5 mr-2" />
              Already Applied
            </button>
          ) : (
            <Link
              to={`/jobs/${job._id}/apply`}
              className="w-full md:w-auto bg-blue-600 text-white px-8 py-3 rounded-lg hover:bg-blue-700 transition flex items-center justify-center"
            >
              <Send className="w-5 h-5 mr-2" />
              Apply Now
            </Link>
          )
        )}
      </div>

      <div className="grid md:grid-cols-3 gap-8">
        <div className="md:col-span-2">
          <div className={`${isDarkMode ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow-md p-8 mb-8`}>
            <h2 className="text-2xl font-bold mb-4">Job Description</h2>
            <p className="mb-6 whitespace-pre-line">{job.description}</p>

            <h3 className="text-xl font-bold mb-4">Requirements</h3>
            <ul className="list-disc pl-6 space-y-2">
              {job.requirements.map((req, index) => (
                <li key={index}>{req}</li>
              ))}
            </ul>
          </div>
        </div>

        <div>
          <div className={`${isDarkMode ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow-md p-8`}>
            <h2 className="text-xl font-bold mb-4">Company Overview</h2>
            <div className="flex items-center mb-4">
              <Building2 className="w-12 h-12 text-blue-600 mr-4" />
              <div>
                <h3 className="font-semibold">{job.company}</h3>
                <p className="text-gray-500">{job.location}</p>
              </div>
            </div>
            <p className="text-gray-500">
              Leading technology company specializing in innovative solutions...
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

export default JobDetails;


--- Start of ./src\pages\JobManagement.tsx ---
// src/pages/JobManagement.tsx
import React, { useEffect, useState } from 'react';
import { useStore } from '../store';
import { Job } from '../types';
import JobForm from '../components/JobForm';
import Modal from '../components/Modal';
import {
  fetchJobs,
  createJob,
  updateJob,
  deleteJob,
} from '../services/jobService';
import { useAuth } from '../context/AuthContext';

const JobManagement = () => {
  const isDarkMode = useStore((state) => state.isDarkMode);
  const currentUser = useStore((state) => state.currentUser);
  const [jobs, setJobs] = useState<Job[]>([]);
  const [loading, setLoading] = useState(true);
  const [modalOpen, setModalOpen] = useState(false);
  const [editingJob, setEditingJob] = useState<Job | null>(null);
  const { user } = useAuth();

  const loadJobs = async () => {
    setLoading(true);
    try {
      const data = await fetchJobs();
      const userJobs = data.filter(
        (job) => job.postedBy?.company === user?.company
      );
      setJobs(userJobs);
    } catch (err) {
      console.error('Error loading jobs:', err);
    } finally {
      setLoading(false);
    }
  };


  useEffect(() => {
    loadJobs();
  }, []);

  const handleCreate = async (jobData: Omit<Job, 'id' | 'postedDate'>) => {
    await createJob({ ...jobData, company: user?.company });
    setModalOpen(false);
    await loadJobs();
  };

  const handleUpdate = async (jobData: Omit<Job, 'id' | 'postedDate'>) => {
    if (editingJob) {
      await updateJob(editingJob.id, jobData);
      setEditingJob(null);
      setModalOpen(false);
      await loadJobs();
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('Are you sure you want to delete this job?')) {
      await deleteJob(id);
      await loadJobs();
    }
  };

  return (
    <div className={isDarkMode ? 'text-white' : 'text-gray-900'}>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">Manage Jobs</h1>
        <button
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
          onClick={() => {
            setEditingJob(null);
            setModalOpen(true);
          }}
        >
          + New Job
        </button>
      </div>

      {loading ? (
        <p>Loading jobs...</p>
      ) : jobs.length === 0 ? (
        <p>No jobs posted yet.</p>
      ) : (
        <div className="grid gap-4">
          {jobs.map((job) => (
            <div
              key={job.id}
              className={`p-4 rounded-lg shadow-md ${isDarkMode ? 'bg-gray-800' : 'bg-white'}`}
            >
              <div className="flex justify-between items-center">
                <div>
                  <h2 className="text-xl font-semibold">{job.title}</h2>
                  <p className="text-sm text-gray-500">{job.location} • {job.type}</p>
                </div>
                <div className="space-x-2">
                  <button
                    className="text-sm bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-1 rounded"
                    onClick={() => {
                      setEditingJob(job);
                      setModalOpen(true);
                    }}
                  >
                    Edit
                  </button>
                  <button
                    className="text-sm bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded"
                    onClick={() => handleDelete(job.id)}
                  >
                    Delete
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      <Modal isOpen={modalOpen} onClose={() => setModalOpen(false)}>
        <div
          className={`${isDarkMode ? 'bg-gray-900 text-white' : 'bg-white text-gray-900'
            } p-6 rounded-lg max-h-[90vh] overflow-y-auto w-full`}
        >
          <h2 className="text-2xl font-bold mb-4">{editingJob ? 'Edit Job' : 'Post New Job'}</h2>
          <JobForm
            initialData={editingJob || {}}
            onSubmit={editingJob ? handleUpdate : handleCreate}
            onCancel={() => setModalOpen(false)}
            isLoading={false}
          />
        </div>
      </Modal>

    </div>
  );
};

export default JobManagement;


--- Start of ./src\pages\Jobs.tsx ---
// src/pages/Jobs.tsx
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { Job } from '../types';
import { useStore } from '../store';
import { fetchJobs } from '../services/jobService';

const Jobs = () => {
  const isDarkMode = useStore((state) => state.isDarkMode);
  const [jobs, setJobs] = useState<Job[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadJobs = async () => {
      setLoading(true);
      try {
        const data = await fetchJobs();
        console.log(data)
        setJobs(data);
      } catch (error) {
        console.error('Failed to fetch jobs:', error);
      } finally {
        setLoading(false);
      }
    };

    loadJobs();
  }, []);

  return (
    <div className={isDarkMode ? 'text-white' : 'text-gray-900'}>
      <h1 className="text-3xl font-bold mb-6">Job Listings</h1>
      {loading ? (
        <p>Loading jobs...</p>
      ) : jobs.length === 0 ? (
        <p>No jobs found.</p>
      ) : (
        <div className="grid gap-6">
          {jobs.map((job) => (
            <Link
              key={job.id}
              to={`/jobs/${job._id}`}
              className={`block p-6 rounded-lg shadow-md transition hover:shadow-lg ${isDarkMode ? 'bg-gray-800' : 'bg-white'}`}
            >
              <h2 className="text-xl font-semibold mb-2">{job.title}</h2>
              <p className="text-sm text-gray-500 mb-1">{job.company} • {job.location}</p>
              <p className="text-sm text-gray-500 mb-1">{job.type} • {job.category}</p>
              <p className="text-sm text-gray-600 truncate">{job.description}</p>
            </Link>
          ))}
        </div>
      )}
    </div>
  );
};

export default Jobs;


--- Start of ./src\pages\JobSeekerDashboard.tsx ---
import React from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { useStore } from '../store';
import { dummyApplications, dummyJobs } from '../data';

const applicationData = [
  { week: 'Week 1', applications: 3 },
  { week: 'Week 2', applications: 5 },
  { week: 'Week 3', applications: 2 },
  { week: 'Week 4', applications: 7 },
  { week: 'Week 5', applications: 4 },
  { week: 'Week 6', applications: 6 },
];

function JobSeekerDashboard() {
  const isDarkMode = useStore((state) => state.isDarkMode);
  const currentUser = useStore((state) => state.currentUser);

  const userApplications = dummyApplications.filter(app => app.userId === currentUser?.id);
  const appliedJobs = userApplications.map(app => 
    dummyJobs.find(job => job.id === app.jobId)
  ).filter(Boolean);

  return (
    <div className={`${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-4">Job Seeker Dashboard</h1>
        <p className="text-gray-500">Welcome back, {currentUser?.name}</p>
      </div>

      <div className="grid md:grid-cols-4 gap-6 mb-8">
        <div className={`${isDarkMode ? 'bg-gray-800' : 'bg-white'} p-6 rounded-lg shadow-md`}>
          <h3 className="text-lg font-semibold mb-2">Total Applications</h3>
          <p className="text-3xl font-bold text-blue-600">{userApplications.length}</p>
        </div>
        <div className={`${isDarkMode ? 'bg-gray-800' : 'bg-white'} p-6 rounded-lg shadow-md`}>
          <h3 className="text-lg font-semibold mb-2">Under Review</h3>
          <p className="text-3xl font-bold text-yellow-600">
            {userApplications.filter(app => app.status === 'pending').length}
          </p>
        </div>
        <div className={`${isDarkMode ? 'bg-gray-800' : 'bg-white'} p-6 rounded-lg shadow-md`}>
          <h3 className="text-lg font-semibold mb-2">Accepted</h3>
          <p className="text-3xl font-bold text-green-600">
            {userApplications.filter(app => app.status === 'accepted').length}
          </p>
        </div>
        <div className={`${isDarkMode ? 'bg-gray-800' : 'bg-white'} p-6 rounded-lg shadow-md`}>
          <h3 className="text-lg font-semibold mb-2">Rejected</h3>
          <p className="text-3xl font-bold text-red-600">
            {userApplications.filter(app => app.status === 'rejected').length}
          </p>
        </div>
      </div>

      <div className={`${isDarkMode ? 'bg-gray-800' : 'bg-white'} p-6 rounded-lg shadow-md mb-8`}>
        <h2 className="text-xl font-bold mb-4">Application Activity</h2>
        <div className="h-80">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={applicationData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="week" />
              <YAxis />
              <Tooltip />
              <Line type="monotone" dataKey="applications" stroke="#3B82F6" strokeWidth={2} />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </div>

      <div className={`${isDarkMode ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow-md`}>
        <h2 className="text-xl font-bold p-6 border-b border-gray-200">Application History</h2>
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className={`${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'}`}>
              <tr>
                <th className="px-6 py-3 text-left">Job Title</th>
                <th className="px-6 py-3 text-left">Company</th>
                <th className="px-6 py-3 text-left">Applied Date</th>
                <th className="px-6 py-3 text-left">Status</th>
              </tr>
            </thead>
            <tbody>
              {userApplications.map((app, index) => {
                const job = dummyJobs.find(j => j.id === app.jobId);
                return (
                  <tr key={app.id} className={`${isDarkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-50'}`}>
                    <td className="px-6 py-4">{job?.title}</td>
                    <td className="px-6 py-4">{job?.company}</td>
                    <td className="px-6 py-4">{app.appliedDate}</td>
                    <td className="px-6 py-4">
                      <span className={`px-3 py-1 rounded-full text-sm ${
                        app.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                        app.status === 'accepted' ? 'bg-green-100 text-green-800' :
                        'bg-red-100 text-red-800'
                      }`}>
                        {app.status.charAt(0).toUpperCase() + app.status.slice(1)}
                      </span>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}

export default JobSeekerDashboard;

--- Start of ./src\pages\Login.tsx ---
import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { LogIn } from 'lucide-react';
import { useStore } from '../store';
import { useAuth } from '../context/AuthContext';

function Login() {
  const navigate = useNavigate();
  const isDarkMode = useStore((state) => state.isDarkMode);
  const { login } = useAuth();

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    try {
      await login(email, password);
      // Redirect based on user role
      const user = useStore.getState().currentUser;
      if (user?.role === 'employer') {
        navigate('/employer/dashboard');
      } else {
        navigate('/jobseeker/dashboard');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Invalid email or password');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-md mx-auto">
      <div className={`${isDarkMode ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow-md p-8`}>
        <div className="flex items-center justify-center mb-8">
          <LogIn className="w-12 h-12 text-blue-600" />
        </div>

        <h1 className="text-2xl font-bold text-center mb-8">Welcome Back</h1>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-2">Email</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className={`w-full p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'} border focus:ring-2 focus:ring-blue-500`}
              required
            />
          </div>

          <div className="mb-6">
            <label className="block text-sm font-medium mb-2">Password</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className={`w-full p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'} border focus:ring-2 focus:ring-blue-500`}
              required
            />
          </div>

          <button
            type="submit"
            className={`w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition ${isLoading ? 'opacity-70 cursor-not-allowed' : ''}`}
            disabled={isLoading}
          >
            {isLoading ? 'Signing In...' : 'Sign In'}
          </button>

          <div className="mt-4 text-center">
            <p className={`${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
              Don't have an account?{' '}
              <Link to="/register" className="text-blue-600 hover:text-blue-800">
                Register here
              </Link>
            </p>
          </div>
        </form>
      </div>
    </div>
  );
}

export default Login;

--- Start of ./src\pages\Register.tsx ---
import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { UserPlus } from 'lucide-react';
import { useStore } from '../store';
import { useAuth } from '../context/AuthContext';

function Register() {
  const navigate = useNavigate();
  const isDarkMode = useStore((state) => state.isDarkMode);
  const { register } = useAuth();

  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    role: 'jobseeker' as 'jobseeker' | 'employer',
    company: '',
  });
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    try {
      // Prepare data based on role
      const userData = {
        name: formData.name,
        email: formData.email,
        password: formData.password,
        role: formData.role,
        ...(formData.role === 'employer' && { company: formData.company })
      };

      await register(userData);

      // Redirect based on role
      navigate(formData.role === 'employer' ? '/employer/dashboard' : '/jobseeker/dashboard');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Registration failed. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-md mx-auto">
      <div className={`${isDarkMode ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow-md p-8`}>
        <div className="flex items-center justify-center mb-8">
          <UserPlus className="w-12 h-12 text-blue-600" />
        </div>

        <h1 className="text-2xl font-bold text-center mb-8">Create Account</h1>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-sm font-medium mb-2">Full Name</label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              className={`w-full p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'} border focus:ring-2 focus:ring-blue-500`}
              required
            />
          </div>

          <div className="mb-4">
            <label className="block text-sm font-medium mb-2">Email</label>
            <input
              type="email"
              value={formData.email}
              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
              className={`w-full p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'} border focus:ring-2 focus:ring-blue-500`}
              required
            />
          </div>

          <div className="mb-4">
            <label className="block text-sm font-medium mb-2">Password</label>
            <input
              type="password"
              value={formData.password}
              onChange={(e) => setFormData({ ...formData, password: e.target.value })}
              className={`w-full p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'} border focus:ring-2 focus:ring-blue-500`}
              required
            />
          </div>

          <div className="mb-4">
            <label className="block text-sm font-medium mb-2">Account Type</label>
            <select
              value={formData.role}
              onChange={(e) =>
                setFormData({ ...formData, role: e.target.value as 'jobseeker' | 'employer' })
              }              
              className={`w-full p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'} border focus:ring-2 focus:ring-blue-500`}
            >
              <option value="jobseeker">Job Seeker</option>
              <option value="employer">Employer</option>
            </select>
          </div>

          {formData.role === 'employer' && (
            <div className="mb-4">
              <label className="block text-sm font-medium mb-2">Company Name</label>
              <input
                type="text"
                value={formData.company}
                onChange={(e) => setFormData({ ...formData, company: e.target.value })}
                className={`w-full p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'} border focus:ring-2 focus:ring-blue-500`}
                required
              />
            </div>
          )}

          <button
            type="submit"
            className={`w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition ${isLoading ? 'opacity-70 cursor-not-allowed' : ''}`}
            disabled={isLoading}
          >
            {isLoading ? 'Creating Account...' : 'Create Account'}
          </button>

          <div className="mt-4 text-center">
            <p className={`${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
              Already have an account?{' '}
              <Link to="/login" className="text-blue-600 hover:text-blue-800">
                Sign in
              </Link>
            </p>
          </div>
        </form>
      </div>
    </div>
  );
}

export default Register;

--- Start of ./src\services\applicationService.ts ---
// src/services/applicationService.ts
import api from '../utils/api';
import { Application } from '../types';

export const getApplications = async (): Promise<Application[]> => {
  const response = await api.get('/applications');
  return response.data;
};

export const getApplication = async (id: string): Promise<Application> => {
  const response = await api.get(`/applications/${id}`);
  return response.data;
};

export const createApplication = async (data: Partial<Application>): Promise<Application> => {
  const response = await api.post('/applications', data);
  return response.data;
};

export const updateApplicationStatus = async (id: string, status: string): Promise<Application> => {
  const response = await api.put(`/applications/${id}/status`, { status });
  return response.data;
};



--- Start of ./src\services\authService.ts ---
import jwt from 'jsonwebtoken';
import { dummyUsers } from '../data';
import { User } from '../types';

// In a real application, this would be an environment variable
const JWT_SECRET = 'your-secret-key';

export const loginUser = async (email: string, password: string) => {
    // In a real app, you would validate the password against a hashed version
    const user = dummyUsers.find(u => u.email === email);

    if (!user) {
        throw new Error('Invalid credentials');
    }

    // Generate JWT token
    const token = jwt.sign(
        { id: user.id, email: user.email, role: user.role },
        JWT_SECRET,
        { expiresIn: '7d' }
    );

    return { user, token };
};

export const registerUser = async (userData: Record<string, any>) => {
    // Simulate network delay
    await new Promise(resolve => setTimeout(resolve, 500));

    const existingUser = dummyUsers.find(u => u.email === userData.email);
    if (existingUser) {
        throw new Error('User already exists');
    }

    // Create a new user
    const newUser: User = {
        id: String(dummyUsers.length + 1),
        name: userData.name,
        email: userData.email,
        role: userData.role,
    };

    if (userData.role === 'employer' && userData.company) {
        newUser.company = userData.company;
    }

    // Add to dummy users
    dummyUsers.push(newUser);

    // Generate JWT token
    const token = jwt.sign(
        { id: newUser.id, email: newUser.email, role: newUser.role },
        JWT_SECRET,
        { expiresIn: '7d' }
    );

    return { user: newUser, token };
};

export const verifyToken = async (token: string) => {
    try {
        // Verify and decode the token
        const decoded = jwt.verify(token, JWT_SECRET) as { id: string };

        // Find user by id
        const user = dummyUsers.find(u => u.id === decoded.id);

        if (!user) {
            throw new Error('User not found');
        }

        return { user };
    } catch (error) {
        throw new Error('Invalid token');
    }
};

--- Start of ./src\services\jobService.ts ---
// src/services/jobService.ts
import { Job } from '../types';
import api from '../utils/api';

export const fetchJobs = async (filters: Record<string, any> = {}): Promise<Job[]> => {
  const response = await api.get('/jobs', { params: filters });
  return response.data;
};

export const fetchJob = async (id: string): Promise<Job> => {
  const response = await api.get(`/jobs/${id}`);
  console.log(response)
  return response.data;
};

export const createJob = async (jobData: Partial<Job>): Promise<Job> => {
  const response = await api.post('/jobs', jobData);
  return response.data;
};

export const updateJob = async (id: string, jobData: Partial<Job>): Promise<Job> => {
  const response = await api.put(`/jobs/${id}`, jobData);
  return response.data;
};

export const deleteJob = async (id: string): Promise<{ message: string }> => {
  const response = await api.delete(`/jobs/${id}`);
  return response.data;
};

export const searchJobs = async (filters: {
  search?: string;
  category?: string;
  type?: string;
  location?: string;
}) => {
  const response = await api.get('/jobs/search', { params: filters });
  return response.data;
};


--- Start of ./src\store\index.ts ---
import { create } from 'zustand';
import { Job, Application, User } from '../types';

interface Store {
  isDarkMode: boolean;
  toggleDarkMode: () => void;
  currentUser: User | null;
  setCurrentUser: (user: User | null) => void;
}

export const useStore = create<Store>((set) => ({
  isDarkMode: false,
  toggleDarkMode: () => set((state) => ({ isDarkMode: !state.isDarkMode })),
  currentUser: null,
  setCurrentUser: (user) => set({ currentUser: user }),
}));

--- Start of ./src\types\index.ts ---
export interface Job {
  createdAt: string | number | Date;
  _id: string;
  postedBy?: {
    name: string;
    company: string;
  };
  id: string;
  title: string;
  company: string;
  location: string;
  type: string;
  salary: string;
  description: string;
  requirements: string[];
  postedDate: string;
  category: string;
}

export interface Application {
  user: any;
  job: any;
  id: string;
  jobId: string;
  userId: string;
  status: 'pending' | 'reviewed' | 'rejected' | 'accepted';
  appliedDate: string;
  coverLetter: string;
  resume: string;
}

export interface User {
  id: string;
  name: string;
  email: string;
  role: 'employer' | 'jobseeker';
  company?: string;
}

--- Start of ./src\utils\api.ts ---
// src/utils/api.ts
import axios from 'axios';
import { getAuthCookie } from './cookies';

// Create base axios instance
const api = axios.create({
  baseURL: 'http://localhost:5000/api',
  headers: {
    'Content-Type': 'application/json',
  },
});

// Add request interceptor to include JWT token in headers
api.interceptors.request.use(
  (config) => {
    const token = getAuthCookie();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Add response interceptor to handle errors
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response) {
      // Handle specific status codes
      if (error.response.status === 401) {
        // Handle unauthorized access
        window.location.href = '/login';
      }
      return Promise.reject(error.response.data);
    }
    return Promise.reject(error);
  }
);

export default api;

// Get all jobs with optional filters
export const getJobs = async (filters: Record<string, any> = {}) => {
    const response = await api.get('/jobs', { params: filters });
    return response.data;
  };
  
  // Get a single job by ID
  export const getJob = async (id: string) => {
    const response = await api.get(`/jobs/${id}`);
    return response.data;
  };
  
  // Create a new job
  export const createJob = async (jobData: Record<string, any>) => {
    const response = await api.post('/jobs', jobData);
    return response.data;
  };
  
  // Update a job
  export const updateJob = async (id: string, jobData: Record<string, any>) => {
    const response = await api.put(`/jobs/${id}`, jobData);
    return response.data;
  };
  
  // Delete a job
  export const deleteJob = async (id: string) => {
    const response = await api.delete(`/jobs/${id}`);
    return response.data;
  };

--- Start of ./src\utils\cookies.ts ---
import Cookies from 'js-cookie';

const TOKEN_COOKIE = 'job_portal_auth_token';

export const setAuthCookie = (token: string) => {
  // Set cookie with secure attributes - expires in 7 days
  Cookies.set(TOKEN_COOKIE, token, {
    expires: 7,
    secure: process.env.NODE_ENV === 'production',
    sameSite: 'strict',
  });
};

export const getAuthCookie = (): string | undefined => {
  return Cookies.get(TOKEN_COOKIE);
};

export const removeAuthCookie = () => {
  Cookies.remove(TOKEN_COOKIE);
};

